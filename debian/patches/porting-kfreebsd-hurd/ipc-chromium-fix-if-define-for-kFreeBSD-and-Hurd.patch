From: Christoph Goehre <chris@sigxcpu.org>
Date: Wed, 31 Oct 2012 13:27:07 -0400
Subject: ipc/chromium: fix #if define() for kFreeBSD and Hurd

The kFreeBSD and Hurd platforms need some other macros to include
the correct needed headers.
Depended on this some minor changes to call the correct functions
also needed. Also the list of the cpp source file for the chromium
things needs to expanded.
The changes is an adoption of the previous droped patch 'Fix
ipc/chromium on kFreeBSD and Hurd' from the the version 17.
---
 mozilla/ipc/chromium/src/base/platform_thread_posix.cc | 9 ++++++---
 1 file changed, 6 insertions(+), 3 deletions(-)

diff --git a/mozilla/ipc/chromium/src/base/platform_thread_posix.cc b/mozilla/ipc/chromium/src/base/platform_thread_posix.cc
index 98ec20f..b4e105b 100644
--- a/mozilla/ipc/chromium/src/base/platform_thread_posix.cc
+++ b/mozilla/ipc/chromium/src/base/platform_thread_posix.cc
@@ -11,16 +11,19 @@
 #include <mach/mach.h>
 #elif defined(OS_NETBSD)
 #include <lwp.h>
-#elif defined(OS_LINUX)
+#elif defined(OS_LINUX) && !defined(__FreeBSD_kernel__) && !defined(__GNU__)
 #include <sys/syscall.h>
 #include <sys/prctl.h>
+//#elif defined(OS_FREEBSD) && !defined(__FreeBSD_kernel__)
+//#include <sys/param.h>
+//#include <sys/thr.h>
 #endif
 
 #if !defined(OS_MACOSX)
 #include <unistd.h>
 #endif
 
-#if defined(OS_BSD) && !defined(OS_NETBSD) && !defined(__GLIBC__)
+#if !defined(OS_BSD) && !defined(NetBSD) && !defined(__FreeBSD_kernel__) && !defined(__GLIBC__)
 #include <pthread_np.h>
 #endif
 
@@ -103,7 +106,7 @@ void PlatformThread::SetName(const char* name) {
   // Note that glibc also has a 'pthread_setname_np' api, but it may not be
   // available everywhere and it's only benefit over using prctl directly is
   // that it can set the name of threads other than the current thread.
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) && !defined(__FreeBSD_kernel__) && !defined(__GNU__)
   prctl(PR_SET_NAME, reinterpret_cast<uintptr_t>(name), 0, 0, 0); 
 #elif defined(OS_NETBSD)
   pthread_setname_np(pthread_self(), "%s", (void *)name);
